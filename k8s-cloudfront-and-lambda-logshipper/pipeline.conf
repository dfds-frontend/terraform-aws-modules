input {
    s3 {
      "bucket" => "${LOG_SOURCE_BUCKET}"
      "region" => "${LOG_SOURCE_BUCKET_REGION}"
      "additional_settings" => {
        "force_path_style" => true
        "follow_redirects" => false
      }
      "prefix" => "${LAMBDA_LOG_PREFIX}"
      codec => "json_lines"
      "tags" => ["lambda"]
      delete => "${DELETE_LAMBDA_LOG_SOURCE_FILES}"
    }

    s3 {
      "bucket" => "${LOG_SOURCE_BUCKET}"
      "region" => "${LOG_SOURCE_BUCKET_REGION}"
      "additional_settings" => {
        "force_path_style" => true
        "follow_redirects" => false
      }
      "prefix" => "${CLOUDFRONT_LOG_PREFIX}"
      interval => 120
      "tags" => ["cloudfront"]
      delete => "${DELETE_CLOUDFRONT_LOG_SOURCE_FILES}"
    }
}

filter {
  mutate { # NOTE: envionment is for logstash and not for the target setup
    add_field => { 
      "job" => "logstash-${ENVIRONMENT}" 
      "level" => "INFO"
      }
  }

 if "cloudfront" in [tags]{
    mutate {
      add_field => {
        "log_source" => "cloudfront"
        "testmessage" => "%{message}"        
        }
    }
    
    grok {
      match => { "testmessage" => "(?<date>%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:monthday})\t%{TIME:time}\t(?<x_edge_location>[\w\-]+)\t(?:%{NUMBER:sc_bytes:int}|-)\t%{IPORHOST:c_ip}\t%{WORD:cs_method}\t%{HOSTNAME:cs_host}\t%{NOTSPACE:cs_uri_stem}\t%{NUMBER:sc_status:int}\t%{NOTSPACE:referrer}\t%{NOTSPACE:User_Agent}\t%{NOTSPACE:cs_uri_query}\t%{NOTSPACE:cookies}\t%{WORD:x_edge_result_type}\t%{NOTSPACE:x_edge_request_id}\t%{HOSTNAME:x_host_header}\t%{WORD:cs_protocol}\t%{NUMBER:cs_bytes:int}\t%{NUMBER:time_taken:float}\t%{NOTSPACE:x_forwarded_for}\t%{NOTSPACE:ssl_protocol}\t%{NOTSPACE:ssl_cipher}\t%{WORD:x_edge_response_result_type}\t%{NOTSPACE:cs_protocol_version}\t%{NOTSPACE:fle_status}\t%{NOTSPACE:fle_encrypted_fields}\t%{NUMBER:c_port:int}\t%{NOTSPACE:time_to_first_byte}\t%{WORD:x_edge_detailed_result_type}\t%{NOTSPACE:sc_content_type}\t%{NOTSPACE:sc_content_len}\t%{NOTSPACE:sc_range_start}\t%{NOTSPACE:sc_range_end}" }
    }

    mutate {
      add_field => [ "listener_timestamp", "%{date} %{time}" ]
    }
      

    date {
      match => ["listener_timestamp", "yyyy-MM-dd HH:mm:ss"]
      target => "@timestamp"
    }

    geoip {
      source => "c_ip"
      target => "geoip_city"
      default_database_type => "City"
    }

    geoip {
      source => "c_ip"
      target => "geoip_asn"
      default_database_type => "ASN"
    }    
    if [geoip_city][country_code2] {
      mutate {
        add_field => {
          "geolocation" => '"latitude":"%{[geoip_city][latitude]}", "longitude":"%{[geoip_city][longitude]}", "country_name":"%{[geoip_city][country_name]}", "continent_code":"%{[geoip_city][continent_code]}", "country_code":"%{[geoip_city][country_code2]}"'
        }
      }
      if [geoip_asn][as_org] {
        mutate {
          replace => {"geolocation" => '%{geolocation}, "organization":"%{[geoip_asn][as_org]}"'}
        }
      }
    } else {
      mutate {
        add_field => {
          "geolocation" => '"latitude":"%{[geoip_city][latitude]}", "longitude":"%{[geoip_city][longitude]}", "organization":"%{[geoip_asn][as_org]}", "continent_code":"%{[geoip_city][continent_code]}"'
        }
      }
    }   

    if "Error" in [x_edge_result_type] {
      mutate {
        replace => {"level" => "ERROR"}
      }
    }

    mutate {
      replace => { "message" => '{"useragent":"%{User_Agent}", "c_geolocation":{%{geolocation}}, "c_ip":"%{c_ip}", "viewer_req_port":"%{c_port}", "referrer":"%{referrer}", "cs_method":"%{cs_method}", "cs_bytes":"%{cs_bytes}", "cs_host":"%{cs_host}", "cs_protocol_version":"%{cs_protocol_version}", "cs_protocol":"%{cs_protocol}", "cs_uri_query":"%{cs_uri_query}", "cs_uri_stem":"%{cs_uri_stem}", "sc_content_length":"%{sc_content_len}", "sc_content_type":"%{sc_content_type}", "sc_bytes":"%{sc_bytes}", "sc_status":"%{sc_status}", "sc_range_start":"%{sc_range_start}", "sc_range_end":"%{sc_range_end}", "cookies":"%{cookies}", "ssl_protocol":"%{ssl_protocol}", "time_taken":"%{time_taken}", "time_to_first_byte":"%{time_to_first_byte}", "x_edge_result_type":"%{x_edge_result_type}", "x_host_header":"%{x_host_header}", "x_edge_detailed_result_type":"%{x_edge_detailed_result_type}", "x_edge_location":"%{x_edge_location}", "x_edge_request_id":"%{x_edge_request_id}", "x_edge_response_result_type":"%{x_edge_response_result_type}", "x_forwarded_for":"%{x_forwarded_for}"}' }
      remove_field => ["sc_content_type", "x_edge_result_type", "x_host_header", "cs_method", "User_Agent", "sc_content_len","year", "month", "monthday", "date", "time", "testmessage", "fle_status", "fle_encrypted_fields", "cloudfront_version", "cloudfront_fields", "c_ip", "ssl_cipher", "listener_timestamp", "sc_range_start", "sc_range_end", "sc_content_length", "cookies", "cs_bytes", "cs_host", "cs_protocol_version", "cs_uri_query", "cs_uri_stem", "cs_protocol", "sc_bytes", "sc_status", "ssl_protocol", "time_taken", "time_to_first_byte", "viewer_req_port", "x_edge_detailed_result_type", "x_edge_location", "x_edge_request_id", "x_edge_response_result_type", "x_forwarded_for", "c_port", "referrer", "geoip_city", "geoip_asn", "geolocation"]
    }
  }
  else if "lambda" in [tags] {
    mutate {
      add_field => {
        "log_source" => "lambda"
      }

      rename => { 
        "name" => "[lambda][name]"
        "version" => "[lambda][version]"
        "region" => "[lambda][region]"
      }
    }

    date {
      match => ["timestamp", "UNIX_MS"]
      target => "@timestamp"
    }

    grok {
      match => { "message" => "(?<type>((?:^|)(START|END|INFO|REPORT|ERROR|DEBUG|WARNING)(?:$|){0,1}))"}
    } 

    grok {
      match => { "message" => "(?<[lambda][request_id]>((?:^|)([0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12})(?:$|){0,1}))"}
    }

    grok {
      match => {"message" => "(?<log>(?<=[START|END|INFO|REPORT|ERROR|DEBUG|WARNING] )(.*))"}
    }

    if "REPORT" in [type] {
      grok {
        match => { "message" => "Duration: %{BASE16FLOAT:[lambda][duration]} ms\sBilled Duration: %{BASE16FLOAT:[lambda][billed_duration]} ms Memory Size: %{BASE10NUM:[lambda][memory_size]} MB\sMax Memory Used: %{BASE10NUM:[lambda][memory_used]} MB" }
      }
    }

    # Adjust message    
    if [type] in ["INFO", "DEBUG", "ERROR", "WARNING"] {
      if [log] =~ "Uncaught Exception" {
        mutate {
          gsub => ["log", "Uncaught Exception", ""]
        }
        mutate {
          replace => { 
            "level" => "%{type}"
            "message" => '{"Exception":"Uncaught Exception", "log":%{log}, "lambda_info":%{lambda}}'
          }
        } 
      } else {
        mutate { # Note: Message structure allows user to insert key-value pairs in the message field in this format: "key":"value". This allow destination to parse message as json objects
          replace => { 
            "level" => "%{type}"
            "message" => '{%{log}, "lambda_info":%{lambda}}' 
          }
        }  
      }           
    }
    else if [type] in ["START", "END", "REPORT"] {
      mutate {
        replace => { 
          "level" => "INFO"
          "message" => '{"log":"%{type}", "lambda_info":%{lambda}}'
        }
      }
    }
    else {
      if [message] =~ "Unknown application error" {
        mutate {        
          replace => { 
            "level" => "ERROR"
            "message" => '{"log":"%{message}", "lambda_info":%{lambda}}'
          }
        }
      }
      else {
        mutate {
          replace => { 
            "level" => "Unknown"
            "message" => '{"log":"%{message}", "lambda_info":%{lambda}}'
          }
        }
      }
    }
    
    mutate {
      remove_field => ["lambda_version","type","log", "lambda"]
    }
  }

  mutate {
    remove_field => ["@version", "tags","timestamp", "id"]
  }
}

######## Used for debug ########
# output {
#   stdout {}
# }
################################

output {
  loki {
    url => "${LOG_SERVER_URL}"
    username => "${LOG_SERVER_USERNAME}"
    password => "${LOG_SERVER_PASSWORD}"
  }
}
