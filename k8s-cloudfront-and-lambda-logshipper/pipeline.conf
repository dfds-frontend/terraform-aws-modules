input {
    s3 {
      "bucket" => "${LOG_SOURCE_BUCKET}"
      "region" => "${LOG_SOURCE_BUCKET_REGION}"
      "additional_settings" => {
        "force_path_style" => true
        "follow_redirects" => false
      }
      "prefix" => "${LAMBDA_LOG_PREFIX}"
      codec => "json_lines"
      "tags" => ["lambda"]
      delete => "${DELETE_LAMBDA_LOG_SOURCE_FILES}"
    }

    s3 {
      "bucket" => "${LOG_SOURCE_BUCKET}"
      "region" => "${LOG_SOURCE_BUCKET_REGION}"
      "additional_settings" => {
        "force_path_style" => true
        "follow_redirects" => false
      }
      "prefix" => "${CLOUDFRONT_LOG_PREFIX}"
      interval => 120
      "tags" => ["cloudfront"]
      delete => "${DELETE_CLOUDFRONT_LOG_SOURCE_FILES}"
    }
}

filter {
  mutate {
    add_field => {
      "job" => "logstash-${ENVIRONMENT}"
      }
  }

  if "cloudfront" in [tags]{
    mutate {
      add_field => {
        "log_source" => "cloudfront"
        "testmessage" => "%{message}"
        "country_code" => "-"
        }
    }
    
    grok {
      match => { "testmessage" => "(?<date>%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:monthday})\t%{TIME:time}\t(?<x_edge_location>[\w\-]+)\t(?:%{NUMBER:sc_bytes:int}|-)\t%{IPORHOST:c_ip}\t%{WORD:cs_method}\t%{HOSTNAME:cs_host}\t%{NOTSPACE:cs_uri_stem}\t%{NUMBER:sc_status:int}\t%{NOTSPACE:referrer}\t%{NOTSPACE:User_Agent}\t%{NOTSPACE:cs_uri_query}\t%{NOTSPACE:cookies}\t%{WORD:x_edge_result_type}\t%{NOTSPACE:x_edge_request_id}\t%{HOSTNAME:x_host_header}\t%{WORD:cs_protocol}\t%{NUMBER:cs_bytes:int}\t%{NUMBER:time_taken:float}\t%{NOTSPACE:x_forwarded_for}\t%{NOTSPACE:ssl_protocol}\t%{NOTSPACE:ssl_cipher}\t%{WORD:x_edge_response_result_type}\t%{NOTSPACE:cs_protocol_version}\t%{NOTSPACE:fle_status}\t%{NOTSPACE:fle_encrypted_fields}\t%{NUMBER:c_port:int}\t%{NOTSPACE:time_to_first_byte}\t%{WORD:x_edge_detailed_result_type}\t%{NOTSPACE:sc_content_type}\t%{NOTSPACE:sc_content_len}\t%{NOTSPACE:sc_range_start}\t%{NOTSPACE:sc_range_end}" }
    }

    mutate {
      add_field => [ "listener_timestamp", "%{date} %{time}" ]
    }
      

    date {
      match => ["listener_timestamp", "yyyy-MM-dd HH:mm:ss"]
      target => "@timestamp"
    }

    geoip {
      source => "c_ip"
      target => "geoip_city"
      default_database_type => "City"
    }

    geoip {
      source => "c_ip"
      target => "geoip_asn"
      default_database_type => "ASN"
    }    
      if [geoip_city][country_code2] {
        mutate {
          add_field => {
            "geolocation" => "latitude=%{[geoip_city][latitude]} longitude=%{[geoip_city][longitude]} country_name=%{[geoip_city][country_name]} continent_code=%{[geoip_city][continent_code]}"
          }
          replace => {"country_code" => "%{[geoip_city][country_code2]}"}
        }
        if [geoip_asn][as_org] {
          mutate {
            gsub => [
              "[geoip_asn][as_org]", "\s" , "_" # handle white space
            ]
          }          
          mutate {
            replace => {"geolocation" => "%{geolocation} organization=%{[geoip_asn][as_org]}"}
          }
        }
      } else {
        mutate {
          add_field => {
            "geolocation" => "latitude=%{[geoip_city][latitude]} longitude=%{[geoip_city][longitude]} organization=%{[geoip_asn][as_org]} continent_code=%{[geoip_city][continent_code]}"
          }
        }
      }      

    mutate {
      rename => {
        "sc_content_type" => "cf_content_type"
        "x_edge_result_type" => "cf_x_edge_result_type"
        "x_host_header" => "cf_x_host_header"
        "cs_method" => "cf_method"        
      }

      replace => { "message" => "sc_content_len=%{sc_content_len} cookies=%{cookies} cs_bytes=%{cs_bytes} cs_host=%{cs_host} cs_protocol_version=%{cs_protocol_version} cs_protocol=%{cs_protocol} cs_uri_query=%{cs_uri_query} cs_uri_stem=%{cs_uri_stem} sc_bytes=%{sc_bytes} sc_status=%{sc_status} ssl_protocol=%{ssl_protocol} time_taken=%{time_taken} time_to_first_byte=%{time_to_first_byte} viewer_req_port=%{c_port} x_edge_detailed_result_type=%{x_edge_detailed_result_type} x_edge_location=%{x_edge_location} x_edge_request_id=%{x_edge_request_id} x_edge_response_result_type=%{x_edge_response_result_type} x_forwarded_for=%{x_forwarded_for} useragent=%{User_Agent} %{geolocation} referrer=%{referrer}" }
      
      remove_field => ["User_Agent", "sc_content_len","year", "month", "monthday", "date", "time", "testmessage", "fle_status", "fle_encrypted_fields", "cloudfront_version", "cloudfront_fields", "c_ip", "ssl_cipher", "listener_timestamp", "sc_range_start", "sc_range_end", "sc_content_length", "cookies", "cs_bytes", "cs_host", "cs_protocol_version", "cs_uri_query", "cs_uri_stem", "cs_protocol", "sc_bytes", "sc_status", "ssl_protocol", "time_taken", "time_to_first_byte", "viewer_req_port", "x_edge_detailed_result_type", "x_edge_location", "x_edge_request_id", "x_edge_response_result_type", "x_forwarded_for", "c_port", "referrer", "geoip_city", "geoip_asn", "geolocation"]
    }
  }
  else if "lambda" in [tags] {
    mutate {
      add_field => {
        "log_source" => "lambda"
      }
      remove_field => ["timestamp", "id"]

      rename => {
        "version" => "lambda_version" 
        "name" => "lambda_name"
        "region" => "lambda_region"
      }
    }

    date {
      match => ["timestamp", "UNIX_MS"]
      target => "@timestamp"
    } 

    grok {
      match => { "message" => "(?<lambda_message_type>((?:^|)(START|END|INFO|REPORT|ERROR)(?:$|){0,1}))"}
    }  
  }

  mutate {
    remove_field => ["@version", "tags"]
  }
}

######## Used for debug ########
# output {
#   stdout {}
# }
################################

output {
  loki {
    url => "${LOG_SERVER_URL}"
    username => "${LOG_SERVER_USERNAME}"
    password => "${LOG_SERVER_PASSWORD}"
  }
}
